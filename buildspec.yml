version: 0.2
phases:
  install:
    commands:
      #- echo "Installing Go 1.17..."
      #- wget https://golang.org/dl/go1.17.linux-amd64.tar.gz
      #- tar -C /usr/local -xzf go1.17.linux-amd64.tar.gz
      #- rm go1.17.linux-amd64.tar.gz
      #- export PATH=$PATH:/usr/local/go/bin
      #- go version
      #- echo "Installing required packages..."
      - go get -u github.com/stretchr/testify
      #- go get github.com/axw/gocov/gocov
      #- go get github.com/AlekSi/gocov-xml
  pre_build:
    commands:
      - echo "Running tests..."
      - go test
      #- gocov convert coverage.out > coverage.json
      #- gocov-xml < coverage.json > coverage.xml
      - echo Logging in to Amazon ECR...
      - echo $CODEBUILD_SOURCE_VERSION
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin 559816800025.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - REPOSITORY_URI=559816800025.dkr.ecr.us-east-2.amazonaws.com/another-simple-api
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Writing image definitions file...
      - printf '{"AWSEBDockerrunVersion":"1","Image":{"Name":"%s","Update":"true"},"Ports":[{"ContainerPort":80,"HostPort":80}]}' $REPOSITORY_URI:$IMAGE_TAG > Dockerrun.aws.json
      - cat Dockerrun.aws.json

artifacts:
  files: 
    - Dockerrun.aws.json
    #- coverage.xml

#reports:
#  test-coverage: # Test coverage report
#    file-format: COBERTURAXML
#    files:
#      - coverage.xml
#    base-directory: '.'